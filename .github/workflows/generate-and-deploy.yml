name: Dynamic Deploy Terraform Resources

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      resources:
        description: 'Recursos a ejecutar (separados por comas, ej: recurso1,recurso2; dejar vacío para todos)'
        required: false
        default: ''

env:
  AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
  AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
  CONTAINER_NAME: tfstate
  ENVIRONMENTS: dev pre pro

permissions:
  contents: read
  id-token: write
  pull-requests: write
  actions: write

jobs:
  discover-resources:
    runs-on: ubuntu-latest
    outputs:
      resources: ${{ steps.set-resources.outputs.resources }}
      selected_resources: ${{ steps.set-resources.outputs.selected_resources }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: List resource directories
        id: set-resources
        run: |
          # Lista las carpetas en el directorio raíz, excluyendo .git y otros ocultos
          resources=$(find . -maxdepth 1 -type d -not -path '.' -not -path './.*' -exec basename {} \; | jq -R . | jq -s -c .)
          if [ "$resources" = "[]" ]; then
            echo "Error: No resources found"
            exit 1
          fi
          echo "Found resources: $resources"
          
          # Procesar input resources
          if [[ -n "${{ github.event.inputs.resources }}" ]]; then
            # Convertir el input en un array JSON, eliminando espacios
            input_resources=$(echo "${{ github.event.inputs.resources }}" | tr -d ' ' | tr ',' '\n' | jq -R . | jq -s -c .)
            echo "Input resources: $input_resources"
            # Verificar que cada recurso del input exista
            for input_resource in $(echo "$input_resources" | jq -r '.[]'); do
              if ! echo "$resources" | jq -e '.[] | select(. == "'"$input_resource"'")'; then
                echo "Error: El recurso '$input_resource' no existe"
                exit 1
              fi
            done
            selected_resources="$input_resources"
          else
            # Si no se proporciona input, usar todos los recursos
            selected_resources="$resources"
          fi
          
          echo "Selected resources: $selected_resources"
          echo "resources=$resources" >> $GITHUB_OUTPUT
          echo "selected_resources=$selected_resources" >> $GITHUB_OUTPUT
        shell: bash

  deploy-resources:
    needs: discover-resources
    runs-on: ubuntu-latest
    name: Deploy ${{ matrix.resource }}
    strategy:
      matrix:
        resource: ${{ fromJson(needs.discover-resources.outputs.selected_resources) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Run Terraform for resource
        run: |
          echo "Ejecutando Terraform para ${{ matrix.resource }}"
          cd ${{ matrix.resource }}
          terraform init -backend-config="storage_account_name=$AZURE_STORAGE_ACCOUNT" \
                         -backend-config="container_name=$CONTAINER_NAME" \
                         -backend-config="key=${{ matrix.resource }}.tfstate" \
                         -backend-config="access_key=$AZURE_STORAGE_KEY"
          terraform plan
          terraform apply -auto-approve