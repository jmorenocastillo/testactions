name: Generate and Deploy Terraform Resources

on:
  push:
    branches:
      - main
  workflow_dispatch:
env:
  git_token: ${{ secrets.git_token }}
permissions:
  contents: write
  id-token: write
  pull-requests: write
  actions: write
jobs:
  generate-workflow:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Discover resources and generate workflow
        id: generate
        run: |
          # Descubrir recursos
          RESOURCES=$(find . -maxdepth 1 -type d -not -path '.' -not -path './.*' -exec basename {} \;)
          echo "Resources found: $RESOURCES"
          
          # Verificar que RESOURCES no esté vacío
          if [ -z "$RESOURCES" ]; then
            echo "Error: No resources found"
            exit 1
          fi

          # Crear el YAML dinámico
          mkdir -p .github/workflows
          cat << 'EOF' > .github/dynamic-deploy.yml
          name: Dynamic Deploy Terraform Resources

          on:
            workflow_call:

          env:
            AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
            AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
            CONTAINER_NAME: tfstate
            ENVIRONMENTS: dev pre pro

          jobs:
          EOF

          # Añadir un job por cada recurso
          for RESOURCE in $RESOURCES; do
            cat << EOF >> .github/dynamic-deploy.yml
            $RESOURCE:
              runs-on: ubuntu-latest
              steps:
                - name: Checkout repository
                  uses: actions/checkout@v4

                - name: Setup Terraform
                  uses: hashicorp/setup-terraform@v3
                  with:
                    terraform_version: 1.5.0

                - name: Deploy Terraform for $RESOURCE
                  env:
                    ARM_CLIENT_ID: \${{ secrets.ARM_CLIENT_ID }}
                    ARM_CLIENT_SECRET: \${{ secrets.ARM_CLIENT_SECRET }}
                    ARM_SUBSCRIPTION_ID: \${{ secrets.ARM_SUBSCRIPTION_ID }}
                    ARM_TENANT_ID: \${{ secrets.ARM_TENANT_ID }}
                  run: |
                    for ENV in \$ENVIRONMENTS; do
                      echo "Deploying $RESOURCE in \$ENV..."
                      cd '$RESOURCE'"/\$ENV"
                      terraform init -backend-config="storage_account_name=\$AZURE_STORAGE_ACCOUNT" \
                                     -backend-config="container_name=\$CONTAINER_NAME" \
                                     -backend-config="access_key=\$AZURE_STORAGE_KEY" \
                                     -backend-config="key=$RESOURCE-\$ENV.tfstate"
                      terraform apply -auto-approve
                      cd ../..
                    done
          EOF
          done

      - name: Debug generated workflow
        run: |
          echo "Generated workflow content:"
          cat .github/workflows/dynamic-deploy.yml || echo "Error: Failed to read dynamic-deploy.yml"

      - name: Upload generated workflow as artifact
        uses: actions/upload-artifact@v4
        with:
          name: dynamic-workflow
          path: .github/workflows/dynamic-deploy.yml

      - name: Commit and push generated workflow
        run: |
          git config user.name "jmorenocastillo"
          git config user.email "c_ompucenter@yahoo.es"
          git config --global user.password ${{ secrets.git_token }}
          git add .
          password=${{ secrets.git_token }}
          # Verificar si hay cambios para evitar commits innecesarios
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Generate dynamic workflow for resources [skip ci]"
            git push
          fi

      - name: Trigger dynamic workflow
        if: steps.commit.outputs.changed == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'dynamic-deploy.yml',
              ref: 'main'
            });